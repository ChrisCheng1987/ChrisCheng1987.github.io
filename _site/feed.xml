<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ChrisCheng</title>
    <description>不知道未来，不知道烦恼，不知那样的日子，会是那么少。
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 15 Oct 2016 18:25:31 -0400</pubDate>
    <lastBuildDate>Sat, 15 Oct 2016 18:25:31 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Welcome to my blog, Jess!</title>
        <description>&lt;h1 id=&quot;jess--&quot;&gt;Jess, 这网页做得咋样？ 哈哈&lt;/h1&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 09 Oct 2016 00:23:44 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/10/09/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/10/09/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>使用Jekyll创建静态网页，并托管在Github.io</title>
        <description>&lt;p&gt;良心的github给每个用户提供了一个repository (username.github.io)来托管静态网页，名为Github Pages，用于管理project，写blog等。同时git pages与很火的静态网站生成工具jekyll深度集成，使得创建多页面网站变得很容易。比较出名的使用Github Pages+jekyll的项目可以参考&lt;a href=&quot;https://github.com/showcases/github-pages-examples&quot;&gt;jekyll examples in github&lt;/a&gt;,这里列出几个:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://microsoft.github.io&quot;&gt;Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ibm.github.io&quot;&gt;IBM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://electron.atom.io&quot;&gt;Electron&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文从零开始详细介绍如何用jekyll生成一个满意的程序员blog页面，并托管在Github Pages上(RE0：从零开始的blog创建:))&lt;/p&gt;

&lt;p&gt;注：本文使用windows系统(Win7-64bit)，使用linux的同学仅供参考。&lt;/p&gt;

&lt;h2 id=&quot;githubgit-bash&quot;&gt;注册github并配置git bash&lt;/h2&gt;

&lt;h3 id=&quot;github&quot;&gt;注册github&lt;/h3&gt;
&lt;p&gt;不多说，假设用户名是madoka，注册邮箱是magicmadoka@gmail.com好了。&lt;/p&gt;

&lt;h3 id=&quot;git-bash&quot;&gt;git bash&lt;/h3&gt;
&lt;p&gt;git bash是windows下可以使用git commands的一种terminal。在&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;这里&lt;/a&gt;下载并安装。装好之后打开git bash，默认的home(~)目录在c/User/current_user。你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt;直接到这一目录。git bash和linux bash的操作比较像，这里就不展开了。需要注意的是如果是第一次使用，需要配置一下账户及ssh key。输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;git config --global user.name &quot;madoka&quot;
git config --global user.email &quot;magicmadoka@gmail.com&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;让git bash知道你是谁。接下来配置ssh key，用于将你的本地repo push到远程服务器。ssh key的检查，创建以及配置可以参考&lt;a href=&quot;https://help.github.com/articles/checking-for-existing-ssh-keys/&quot;&gt;这里&lt;/a&gt;。好，到现在为止，你的git bash已经配置好可以使用了。我们先来建一个文件夹GitPages供以后使用，在git bash中输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;cd ~
mkdir GitPages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;安装并配置jekyll&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;安装参考&lt;a href=&quot;https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/&quot;&gt;这里&lt;/a&gt;的Requirements部分。记得先安装ruby，再装bundle。Ruby是一个编程语言，我还没研究过。但是安装ruby会安装好网页编程三件套Apache+PHP+MySql，可以用来调试网站。并且会安装工具gem，用来下载安装其他工具，感觉跟python里的pip差不多。装好之后记得将ruby的bin目录放到系统变量Path中，否则git bash找不到。比如我的目录是&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Bitnami\rubystack-2.2.5-5\ruby\bin&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;repository&quot;&gt;创建本地repository&lt;/h3&gt;
&lt;p&gt;这里要创建一个你博客网站(以后称为site)的本地存放目录，假设该目录叫MyBlogs。在git bash中输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;cd ~\GitPages
mkdir MyBlogs
cd MyBlogs
git init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;创建并修改Gemfile文件&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;touch Gemfile&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;找到并打开Gemfile，copy以下代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;source 'https://rubygems.org'
gem 'github-pages', group: :jekyll_plugins&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;安装dependencies。在git bash中输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;bundle install
bundle update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里注意bundle是在上一步装好了的，别忘了。这里的bundle update以后可以经常用一用，用于和Github Pages的server同步使用的软件。&lt;/p&gt;

&lt;h3 id=&quot;site&quot;&gt;创建site文件&lt;/h3&gt;
&lt;p&gt;在git bash中输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;bundle exec jekyll new . --force&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到MyBlogs文件夹中多了很多文件和文件夹，这些都有自己的作用。比如_post文件夹存放的是你写的博客文件，这里的文件可以使用Markdown来写。_site文件夹(暂时看不到)存放的是网站的jekyll编译结果，你可以想象成是你写的源文件编译成了网站的可执行文件，最后在浏览器上显示的页面都存在_site文件夹。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;网站调试与设计&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;网站本地测试&lt;/h3&gt;
&lt;p&gt;在git bash中输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;来编译网站，如果没有问题，应该显示类似于以下的信息：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;$ bundle exec jekyll serve
Configuration file: C:/Users/Nan-admin/Git/Git-pages/GitPages/_config.yml
            Source: C:/Users/Nan-admin/Git/Git-pages/GitPages
       Destination: C:/Users/Nan-admin/Git/Git-pages/GitPages/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
                    done in 0.616 seconds.
  Please add the following to your Gemfile to avoid polling for changes:
    gem 'wdm', '&amp;gt;= 0.1.0' if Gem.win_platform?
 Auto-regeneration: enabled for 'C:/Users/Nan-admin/Git/Git-pages/GitPages'
Configuration file: C:/Users/Nan-admin/Git/Git-pages/GitPages/_config.yml
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Server address那里对应的就是本地网站的地址，在浏览器中输入http://127.0.0.1:4000/ 就可以看到网站啦~&lt;/p&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;使用Jekyll模板&lt;/h3&gt;
&lt;p&gt;这时候的网站是很丑的，自己做一个漂亮的模板又烦，这时候就果断使用别人的模板吧~ 网上有很多好看又免费的模板可以使用，可以在
这些网站找到&lt;a href=&quot;http://themes.jekyllrc.org/&quot;&gt;[JekyllThemes]&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;[jekyllthemes.io]&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;[Jekyllthemes.org]&lt;/a&gt;&lt;br /&gt;
本文使用JekyllThemes里的&lt;a href=&quot;http://themes.jekyllrc.org/clean/&quot;&gt;Clean&lt;/a&gt;模板，&lt;a href=&quot;https://github.com/knaman2609/clean&quot;&gt;Github地址&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;fork clone模板，在git bash中输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;cd ~\GitPages
git clone https://github.com/knaman2609/clean.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;会将clean模板下载到&lt;code class=&quot;highlighter-rouge&quot;&gt;~\GitPages\clean&lt;/code&gt;中。到clean文件夹中copy所有文件，paste到&lt;code class=&quot;highlighter-rouge&quot;&gt;~\GitPages\MyBlogs&lt;/code&gt;中，该合并的合并，该替换的替换。好啦，现在再用&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;看看，我们的blog是不是好看多了呢？&lt;/p&gt;

&lt;p&gt;这个时候可以在_post文件夹下建更多的文件，每个文件都是一个独立的blog post。可以参考模板自带的2015-09-26-clean-theme.md来写markdown代码。&lt;/p&gt;

&lt;p&gt;可以修改_sass文件夹，_layout文件夹和_includes文件夹下的内容来让网站的外观更符合你的要求。比如如果你觉得Blog显示的宽度太窄，可以修改_layout.scss下面post段下面所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt;属性，比如从540px改成840px。别忘了修改_base.scss下blockquote中的&lt;code class=&quot;highlighter-rouge&quot;&gt;max-width&lt;/code&gt;属性，它影响的是代码highlight的显示宽度。&lt;/p&gt;

&lt;p&gt;注意服务器在运行的时候你是可以任意修改文件的，修改结果会即时编译到site中，在浏览器中刷新就可以看到修改结果。&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;托管到Github Pages&lt;/h2&gt;
&lt;p&gt;当我们做好了网站，需要上传到互联网上，这里使用Github Pages给我们提供的服务器来做这件事。登录你的github website，建立一个repository叫做madoka.github.io。这里注意必须是username.github.io的形式，并且不要用readme来初始化。这个madoka.github.io就是我们存放网站的远程地址啦。那么现在需要做的就是将做好的网站push过来。在git bash中输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;cd ~\GitPages\MyBlogs
git add .
git commit -m &quot;first blogs&quot;
git remote add origin https://github.com/madoka/madoka.github.io.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你的blog就上传到网上啦~在浏览器输入madoka.github.io，是不是就看到做好的blog了？注意以后每次修改本地网站文件都要执行上面的git命令来更新远程server，但&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin https://github.com/madoka/madoka.github.io.git&lt;/code&gt;这一步就不需要了。至于这些命令的含义，可以看看这个视频&lt;a href=&quot;https://www.youtube.com/watch?v=nN6QuNqmAwk&quot;&gt;GitHub Pages and Jekyll Beginner Video&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;一些资源&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs&quot;&gt;git commands guides&lt;/a&gt;：详细的git commands reference document &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=c5WkxIzK0eA&quot;&gt;Introduction to Blogging with Jekyll&lt;/a&gt;：Jekyll的presentation &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=iWowJBRMtpc&quot;&gt;Getting Started With Jekyll, The Static Site Generator&lt;/a&gt;：比较详细的Jekyll系列教程 &lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll document&lt;/a&gt;：官方的Jekyll文档 &lt;br /&gt;
&lt;a href=&quot;http://www.w3schools.com/css/default.asp&quot;&gt;CSS document&lt;/a&gt;：CSS文档&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Oct 2015 14:51:59 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/10/07/create-static-pages-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/10/07/create-static-pages-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>回调函数思考</title>
        <description>&lt;p&gt;回调函数指通过函数指针或者函数引用将一个函数A作为参数传给函数B，以在特定时间（如函数B执行得到一些结果）执行函数A。
详细例子可参考知乎回答
&lt;a href=&quot;https://www.zhihu.com/question/19801131&quot;&gt;回调函数（callback）是什么？&lt;/a&gt; @futeng (Java代码)。Java中不能将函数作为参数传递，所以回调一般是通过interface实现的&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;回调的作用主要有两个&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;库函数或其他函数中执行外部函数&lt;/h3&gt;
&lt;p&gt;因为库函数都是事先写好的，因此要在特定时间或者得到特定结果时执行客户端程序，不能简单的include头文件然后直接调用A函数。就算在一般的B程序中，以参数形式传入函数也使得程序便利性大大增加。例子：&lt;/p&gt;

&lt;p&gt;library.h (库函数，已封装)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fill_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;//这里也可以使用泛型定义
//见https://www.zhihu.com/question/19801131@lee philip的回答
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用库callback.cpp&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;library.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//这里可以根据不同情况选择回调不同的函数，而不用修改库函数(函数B)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;fill_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-2&quot;&gt;异步调用&lt;/h3&gt;
&lt;p&gt;另一种使得回调函数非常重要的原因是它广泛应用于异步调用中。事件驱动程序编程中，通常需要监听事件的结果，如鼠标操作等，同时主程序继续执行。这时，可以通过多线程执行事件和回调函数响应时间来实现。注：这里其实还是和第一点有关，由于事件监听通常都是库函数，因此使用回调基本上是处理响应的唯一选择(无法修改库函数来响应事件)。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;character_Move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){...}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//direction: e.g., 1 means move forward
//游戏主进程
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//主进程
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;listenKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;character_Move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//主进程
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listenKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respons_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//取得键盘输入并返回int
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;respons_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 14:51:59 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/09/26/thinkingoncallback.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/09/26/thinkingoncallback.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>A Clean Jekyll theme</title>
        <description>&lt;h2 id=&quot;subheading&quot;&gt;Subheading&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at mauris ante. Cras sit amet porta quam. Donec eu gravida elit. Sed a diam eget sem lacinia maximus vel et elit. Nullam id egestas nulla. Duis dapibus at quam eu dapibus. Maecenas ullamcorper placerat eros, eu posuere enim bibendum eget. Phasellus mollis enim molestie tortor aliquam, nec auctor ligula &lt;code class=&quot;highlighter-rouge&quot;&gt;fringilla&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample Code&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:3000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Do this&lt;/li&gt;
  &lt;li&gt;Do that&lt;/li&gt;
  &lt;li&gt;Bla Bla Bla&lt;/li&gt;
  &lt;li&gt;Go to Sleep&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Sep 2015 14:51:59 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/09/26/clean-theme.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/09/26/clean-theme.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Hello</title>
        <description>&lt;p&gt;Hello Jekyll&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/09/26/hello.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/09/26/hello.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
